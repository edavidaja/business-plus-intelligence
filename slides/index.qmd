---
format: 
    revealjs: 
        theme: dark
        navigation-mode: linear
        transition: fade
from: markdown+emoji
---

# business 🤝 intelligence

enhancing tableau with web APIs

## agenda

- web APIs & frameworks
- development workflows
- deployment
- analytics extensions

# web APIs & frameworks

## what?

> A server-side web API consists of one or more publicly exposed endpoints to a defined request–response message system, typically expressed in JSON or XML.
>
> -- [Wikipedia](https://en.wikipedia.org/wiki/Web_API)

## what?

```{mermaid}

sequenceDiagram
    client ->> server: request
    server -->> client: response
```

## why

language independent resource consumption  

> "I don't care what your program is written in as long as it answers my question"

- complicated business logic
- [model](https://rstudio.github.io/vetiver-r/) [serving](https://rstudio.github.io/vetiver-python/stable/)

## model serving

```{mermaid}
sequenceDiagram
	tableau ->> connect: data
	connect -->> tableau: prediction
```

## VERBS

- `GET`
- `POST`
- `PATCH`
- `PUT`
- `DELETE`

## VERBS [and theology](https://stackoverflow.com/questions/630453/what-is-the-difference-between-post-and-put-in-http)

"crud"

- `GET` (read)
- `POST` (create | update)
- `PATCH` (update)
- `PUT` (create | update)
- `DELETE` (delete)


## frameworks

::: columns

::: column
### R

| framework                                  | connect             |
| -------------------------------------------| :------------------:|
| [plumber](https://www.rplumber.io/)        | :white_check_mark:  |
| [RServe](https://www.rforge.net/Rserve/)   |                     |
| [RestRserve](https://restrserve.org/)      |                     |
| [fiery](https://fiery.data-imaginist.com/) |                     |
| [ambiorix](https://ambiorix.dev/)          |                     |


:::

::: column
### Python

| framework |      connect       |
| --------- |:------------------:|
| [flask](https://flask.palletsprojects.com/en/2.2.x/)     | :white_check_mark: |
| [FastAPI](https://fastapi.tiangolo.com/)   | :white_check_mark: |
| [Quart](https://quart.palletsprojects.com/en/latest/)     | :white_check_mark: |
| [Sanic](https://sanic.dev/)     | :white_check_mark: |
| [Falcon](https://falconframework.org/)    | :white_check_mark: | 

::: fragment
[wsgi](https://wsgi.readthedocs.io/en/latest/what.html), [asgi](https://asgi.readthedocs.io/en/latest/)
:::

:::

:::

##  will it tableau

::: columns

::: column
### R

| framework                                         | tableau            | 
| ------------------------------------------------- | -------            |
| [plumber](https://www.rplumber.io/)               | :white_check_mark: |
| [RServe](https://www.rforge.net/Rserve/)          |   🫳               |
| [RestRserve](https://restrserve.org/)             |                    |
| [fiery](https://fiery.data-imaginist.com/)        |                    |
| [ambiorix](https://github.com/devOpifex/ambiorix) |                    |

:::

::: column
### Python

| framework                                             | tableau | 
| ----------------------------------------------------- | ------- |
| [flask](https://flask.palletsprojects.com/en/2.2.x/)  |         |
| [FastAPI](https://fastapi.tiangolo.com/)              | :white_check_mark:        |
| [Quart](https://quart.palletsprojects.com/en/latest/) |         |
| [Sanic](https://sanic.dev/)                           |         |
| [Falcon](https://falconframework.org/)                |         |

see also: [tabpy](https://github.com/tableau/TabPy)
:::
:::

## the code

function decorators:

::: {.panel-tabset}

### FastAPI

```python
from fastapi import FastAPI
app = FastAPI()

@app.get("/")
def read_root():
    return {"Hello": "World"}
```

### Plumber

```r
library(plumber)
#* Echo back the input
#* @param msg The message to echo
#* @get /echo
function(msg="") {
  list(msg = paste0("The message is: '", msg, "'"))
}
```
:::

# development

## API docs

- OpenAPI docs let you interact with an API from the web  
- [httpbin](https://httpbin.org)
- FastAPI and Plumber generate these from your code
  - Flask supports these through additional packages

## exercise 1

1. build the exercise environment in your preferred language 
2. go to the "vanilla" folder
3. launch the API and explore its behavior from the docs

::: {.panel-tabset}
### R
```r
renv::restore()
```
### Python
```bash
python -m venv .venv
source .venv/bin/activate
python -m pip install -U pip setuptools wheel
python -m pip install -r requirements.txt
```
:::

## testing from the command line

- [`curl`](https://curl.se/): universally available, powerful, a bit onerous when data is involved
- [`httpie`](https://httpie.io/cli): simple syntax, great for quick testing, written in Python

# an aside on Python environments

## the iron law of python management

[create a virtual environment for **every** project.](https://solutions.posit.co/write-code/minimum-viable-python/installing-packages/#the-iron-law-of-python-management)

## exercise 2

install `httpie`

```bash
python -m pip install pipx
python -m pipx ensurepath
exec $SHELL
pipx install httpie
```

test the api locally

```bash
http :PORT/any text="thumb"
http :PORT/any text="smile"
```

# deployment

## Connect

- [API keys](https://docs.posit.co/connect/user/api-keys/#api-keys)

## exercise 3

deploy your vanilla API to Connect

::: {.panel-tabset}
### R

use push-button deployment

or

generate a manifest and use the CLI

```r
rsconnect::writeManifest()
```
```bash
rsconnect deploy manifest manifest.json 
```

### Python

```bash
rsconnect deploy fastapi . 
```
:::

# tableau analytics extensions

## exercise 4

start the tableau version of the API in your preferred language